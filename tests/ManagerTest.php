<?php
namespace Aura\Marshal;
use Aura\Marshal\Relation\Builder as RelationBuilder;
use Aura\Marshal\Type\Builder as TypeBuilder;
use Yoast\PHPUnitPolyfills\TestCases\TestCase;

/**
 * Test class for Manager.
 * Generated by PHPUnit on 2011-11-21 at 11:28:20.
 */
class ManagerTest extends TestCase
{
    /**
     * @var Manager
     */
    protected $manager;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function set_up()
    {
        parent::set_up();

        $relation_builder = new RelationBuilder;
        $type_builder = new TypeBuilder;
        $types = include __DIR__ . DIRECTORY_SEPARATOR . 'fixture_types.php';
        $this->manager = new Manager($type_builder, $relation_builder);
        foreach ($types as $name => $info) {
            $this->manager->setType($name, $info);
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tear_down()
    {
        parent::tear_down();
    }

    public function test__get()
    {
        $actual = $this->manager->posts;
        $expect = 'Aura\Marshal\Type\GenericType';
        $this->assertInstanceOf($expect, $actual);
    }

    public function test__getNoSuchType()
    {
        $this->expectException('Aura\Marshal\Exception');
        $actual = $this->manager->no_such_type;
    }

    public function testGetTypes()
    {
        $actual = $this->manager->getTypes();
        $expect = [
            'authors',
            'posts',
            'metas',
            'comments',
            'posts_tags',
            'tags',
        ];

        $this->assertSame($expect, $actual);
    }

    public function testSetType_alreadySet()
    {
        $this->expectException('Aura\Marshal\Exception');
        $this->manager->setType('authors', []);
    }

    public function testSetRelation_noSuchType()
    {
        $this->expectException('Aura\Marshal\Exception');
        $this->manager->setRelation('no_such_type', 'relation_name', []);
    }

    public function testSetRelation_typeNotInstantiated()
    {
        $relation_builder = new RelationBuilder;
        $type_builder = new TypeBuilder;
        $types = include __DIR__ . DIRECTORY_SEPARATOR . 'fixture_types.php';
        $manager = new Manager($type_builder, $relation_builder);

        foreach ($types as $name => $info) {
            // remove the relationship information
            unset($info['relation_names']);
            // set into manager
            $manager->setType($name, $info);
        }

        // add relations just for authors, before instantiating the authors type
        $type = $types['authors'];
        $rels = $type['relation_names'];
        unset($type['relation_names']);
        foreach ($rels as $name => $info) {
            $this->manager->setRelation('authors', $name, $info);
        }

        // now instantiate the authors type...
        $actual = $this->manager->authors;
        $expect = 'Aura\Marshal\Type\GenericType';
        $this->assertInstanceOf($expect, $actual);

        // ... and make sure we have a posts relation.
        $actual = array_keys($this->manager->authors->getRelations());
        $expect = ['posts'];
        $this->assertSame($expect, $actual);
    }

    public function testClear()
    {
        // load data into the types
        $fixture = include __DIR__ . '/fixture_data.php';
        foreach ($fixture as $type => $data) {
            $this->manager->$type->load($data);
        }

        // clear the data
        $this->manager->clear();

        // now there should be nothing
        foreach (array_keys($fixture) as $type) {
            $this->assertSame([], $this->manager->$type->getAllEntities());
        }
    }
}
